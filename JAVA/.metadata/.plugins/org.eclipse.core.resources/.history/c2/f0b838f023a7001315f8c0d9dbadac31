package sorting2014;
/**
 * Insertion sort.
 * @author Evdzhan Mustafa enm3@aber.ac.uk
 */
@SuppressWarnings("rawtypes")
public class InsertionSort implements Sorter {

	
	 

	
	@Override
	public void sort(Comparable[] items, int cutoff) {
		   this.insertionSort(items);
		
	}
	
	
	
	/**
	 * Selection Sort 
	 * The algorithm loops through the array of items,
	 * after iteration number N, the first N+1 elements of the array are in sorted order.
	 * In iteration number N, the N+1 element is inserted to the 
	 * correct position in the already sorted N elements, thus the sorted elements become N+1.
	 * This causes  N - (P+1) elements to be shifted,
	 * where P is the index of the newly inserted(sorted) item, and N is the number of iteration.
	 * @param items
	 */
	
	@SuppressWarnings("unchecked")
	public void insertionSort(Comparable[] items) {
		
		for ( int i = 1 ; i < items.length ; ++i) {
			
			Comparable temp = items[i];
			int j ;
			 int k  = 0 ;
			for(j = i - 1; j >= 0; --j) {
				
				if(items[j].compareTo(temp) < 0) {
					break;
				} 
				k++;
				 items[j+1] = items[j];
			 }
			items[j+1] = temp ;
			System.out.println("After step : "+i+ ", num of swaps are "+ k+ " and new index is "+ (j+1));
		}
	}
}
