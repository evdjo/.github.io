package sorting2014;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Calendar;

@SuppressWarnings("unchecked")
public class SortDemo2 {

	public Comparable[] readData(String fileName) {
		BufferedReader reader = null;
		Comparable[] items = null;
		int size = 0;
		try {
			reader = new BufferedReader(new FileReader(fileName));
		} catch (FileNotFoundException e) {
			System.out.println("No such file -> " + fileName);
			System.exit(0);
		}

		try {
			while (reader.readLine() != null) {
				size++;
			}

			reader = new BufferedReader(new FileReader(fileName));
			 items = new Comparable[size];
			for (int i = 0; i < size; i++) {
				items[i] = reader.readLine();
			}
		} catch (Exception e) {
		}
		return items;
	}

	@SuppressWarnings("rawtypes")
	public long testOne(String type, Comparable[] items) {
		long start=0,finish=0,timeTaken = 0;
		
		Sorter s = SortFactory.getSorter(type);
		if (s != null) {
			start = Calendar.getInstance().getTimeInMillis();
			s.sort(items, 0);
			finish = Calendar.getInstance().getTimeInMillis();
			timeTaken = finish - start;
		} else {
			System.out.println("Failed loading the sorter, no sorting will happen.");
		}
		return timeTaken;
	}

	 

 

	 

	 

	public void outputToFile(String data) {
		try {
			PrintWriter pw = new PrintWriter(
					"/home/evdjoint/Programming/JAVA/CS211/junk");
			pw.write(data);
			pw.close();

		} catch (FileNotFoundException e) {

			e.printStackTrace();
		}
	}

	public String testAll(String filename) {
		String sortTypes[] = { // "RadixSort", "QuickSort", "MergeSort",
		// "ShellSort",
				"InsertionSort", "SelectionSort", "BubbleSort" };
		long timeTaken[] = new long[sortTypes.length];
		StringBuffer retLine = new StringBuffer();
		for (int i = 0; i < sortTypes.length; i++) {

			Comparable[] items = this.readData(filename);
			timeTaken[i] = this.testOne("sorting2014." + sortTypes[i], items);
			retLine.append(sortTypes[i] + "\t" + timeTaken[i] + "\n");
		}

		return retLine.toString();
	}
}